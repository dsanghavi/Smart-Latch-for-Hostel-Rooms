
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000028  00000000  00000000  000000f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000cf  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000097  00000000  00000000  000001e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d1  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000093  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000001e  00000000  00000000  00000417  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	1e d0       	rcall	.+60     	; 0x6c <main>
  30:	24 c0       	rjmp	.+72     	; 0x7a <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <delay_ms>:
#include <avr/io.h>
//#include <util/delay.h>

void delay_ms(uint8_t ms) 
{
  34:	df 93       	push	r29
  36:	cf 93       	push	r28
  38:	00 d0       	rcall	.+0      	; 0x3a <delay_ms+0x6>
  3a:	cd b7       	in	r28, 0x3d	; 61
  3c:	de b7       	in	r29, 0x3e	; 62
  3e:	28 2f       	mov	r18, r24
  40:	0e c0       	rjmp	.+28     	; 0x5e <__SREG__+0x1f>
   uint16_t delay_count = F_CPU / 17500;
   volatile uint16_t i;
 
   while (ms != 0) {
     for (i=0; i != delay_count; i++);
  42:	1a 82       	std	Y+2, r1	; 0x02
  44:	19 82       	std	Y+1, r1	; 0x01
  46:	05 c0       	rjmp	.+10     	; 0x52 <__SREG__+0x13>
  48:	89 81       	ldd	r24, Y+1	; 0x01
  4a:	9a 81       	ldd	r25, Y+2	; 0x02
  4c:	01 96       	adiw	r24, 0x01	; 1
  4e:	9a 83       	std	Y+2, r25	; 0x02
  50:	89 83       	std	Y+1, r24	; 0x01
  52:	89 81       	ldd	r24, Y+1	; 0x01
  54:	9a 81       	ldd	r25, Y+2	; 0x02
  56:	89 5c       	subi	r24, 0xC9	; 201
  58:	91 40       	sbci	r25, 0x01	; 1
  5a:	b1 f7       	brne	.-20     	; 0x48 <__SREG__+0x9>
     ms--;
  5c:	21 50       	subi	r18, 0x01	; 1
void delay_ms(uint8_t ms) 
{
   uint16_t delay_count = F_CPU / 17500;
   volatile uint16_t i;
 
   while (ms != 0) {
  5e:	22 23       	and	r18, r18
  60:	81 f7       	brne	.-32     	; 0x42 <__SREG__+0x3>
     for (i=0; i != delay_count; i++);
     ms--;
   }
}
  62:	0f 90       	pop	r0
  64:	0f 90       	pop	r0
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	08 95       	ret

0000006c <main>:

int main(void)
{
    DDRD |= (1 << PD6);    // LED on PD5. Setting it as output
  6c:	8e 9a       	sbi	0x11, 6	; 17
    
    while(1)
    {
        if (ACSR & (1 << ACO)) {            // comparator output high?
  6e:	45 9b       	sbis	0x08, 5	; 8
  70:	02 c0       	rjmp	.+4      	; 0x76 <main+0xa>
            // flash LED if comparator output is high
            PORTD |=  (1 << PD6);			// switch PD5 LED on
  72:	96 9a       	sbi	0x12, 6	; 18
  74:	fc cf       	rjmp	.-8      	; 0x6e <main+0x2>
        }
        else {
            // comparator output low, so switch LED off                                        
            PORTD &= ~(1 << PD6);			// switch PD5 LED off
  76:	96 98       	cbi	0x12, 6	; 18
  78:	fa cf       	rjmp	.-12     	; 0x6e <main+0x2>

0000007a <_exit>:
  7a:	f8 94       	cli

0000007c <__stop_program>:
  7c:	ff cf       	rjmp	.-2      	; 0x7c <__stop_program>
